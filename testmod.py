from unittest.mock import MagicMockimport unittest# class ProductionClass(object):#     def __init__(self,arg1):#         self.arg1 = arg1##     def cal(self):#         return self.arg1+1# thing = ProductionClass()# thing.method = MagicMock(return_value=3)# thing.method(3, 4, 5, key='value')# thing.method.assert_called_with(3, 4, 5, key='value')class Adder:    def add(self, val1, val2):        return val1 - val2class Calculator:    def __init__(self, adder):        self.adder = adder    def calculate(self, value):        return self.adder.add(int(value[0]), int(value[2]))class TestCalculator(unittest.TestCase):    def test_calculate(self):        mock_adder = MagicMock()        mock_adder.add.return_value = 3        calculator = Calculator(mock_adder)        self.assertEquals(calculator.calculate("1+2"), 3)        self.assertEquals(mock_adder.add.call_args_list[0][0][0], 1)        self.assertEquals(mock_adder.add.call_args_list[0][0][1], 2)if __name__ == "__main__":    unittest.main()